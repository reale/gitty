#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-8 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlets core::github::api

# List commits on a repository.
#
# @cf   https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository
# @public
function bashlets::core::github::repo::commits()
{
    local user="${1:?User name needed}"
    local repo="${2:?Repository name needed}"
    local limit="${3:-100}" callback="${4:-cat}"
    local url="/repos/$user/$repo/commits"

    $BASHLETS_NAMESPACE api paginate "$url" sha "$limit" "$callback"
}

# List commit comments for a repository.
#
# @cf   https://developer.github.com/v3/repos/comments/#list-commit-comments-for-a-repository
# @public
function bashlets::core::github::repo::comments()
{
    local user="${1:?User name needed}"
    local repo="${2:?Repository name needed}"
    local limit="${3:-100}" callback="${4:-cat}"
    local url="/repos/$user/$repo/comments"

    $BASHLETS_NAMESPACE api paginate "$url" id "$limit" "$callback"
}

# Get a repository's code of conduct.
#
# @cf   https://developer.github.com/v3/codes_of_conduct/#get-the-contents-of-a-repositorys-code-of-conduct
# @public
function bashlets::core::github::repo::conduct()
{
    local user="${1:?User name needed}"
    local repo="${2:?Repository name needed}"
    local url="/repos/$user/$repo/community/code_of_conduct"

    (
        # The Codes of Conduct API is currently available for developers to
        # preview. To access the API during the preview period, we must provide
        # a custom media type in the Accept header.
        #
        # @cf https://developer.github.com/v3/codes_of_conduct/#codes-of-conduct

        BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS="$BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS -H 'Accept: application/vnd.github.scarlet-witch-preview+json'"
        $BASHLETS_NAMESPACE api get "$url" .key
    )
}

# Create a new repository for the authenticated user.
#
# @cf   https://developer.github.com/v3/repos/#create
# @public
function bashlets::core::github::repo::create()
{
    local repo="${1:?Repository name needed}"
    local url="/user/repos"
    local json

    json="{ \"name\": \"$repo\" }"
    $BASHLETS_NAMESPACE api post "$url" "$json" .name
}

# Delete a repository.
# Deleting a repository requires admin access. If OAuth is used, the
# `delete_repo` scope is required.
#
# @cf   https://developer.github.com/v3/repos/#delete-a-repository
# @public
function bashlets::core::github::repo::delete()
{
    local user="${1:?User name needed}"
    local repo="${2:?Repository name needed}"
    local url="/repos/$user/$repo"

    $BASHLETS_NAMESPACE api delete "$url"
}

# Fork a repository.
# Note: Forking a Repository happens asynchronously. Therefore, we may have to
# wait a short period before accessing the new git objects. 
#
# @cf   https://developer.github.com/v3/repos/forks/#create-a-fork
# @public
function bashlets::core::github::repo::fork()
{
    local user="${1:?User name needed}"
    local repo="${2:?Repository name needed}"
    local org="$3"  # Optional parameter to specify the organization name if
                    # forking into an organization.

    local url="/repos/$user/$repo/forks"

    [[ -n $org ]] && url="$url&organization=$org"
    
    $BASHLETS_NAMESPACE api post202 "$url" "" .id
}

# List forks for a repository.
#
# @cf   https://developer.github.com/v3/repos/forks/#list-forks
# @public
function bashlets::core::github::repo::forks()
{
    local user="${1:?User name needed}"
    local repo="${2:?Repository name needed}"
    local sort="${3:-newest}"  # newest, oldest, stargazers
    local limit="${4:-100}" callback="${5:-cat}"
    local url="/repos/$user/$repo/forks?sort=$sort"
    
    $BASHLETS_NAMESPACE api paginate "$url" id "$limit" "$callback"
}

# Check if a gist is starred.
#
# @cf   https://developer.github.com/v3/activity/starring/#check-if-you-are-starring-a-repository
# @public
function bashlets::core::github::repo::is_starred()
{
    local owner="${1:?User name needed}"
    local repo="${2:?Repository name needed}"
    local url="/user/starred/$owner/$repo"
    local status

    status="$($BASHLETS_NAMESPACE api status "$url")"

    [[ $status == 204 ]]
}

# Get the contents of a repository's license.
#
# @cf   https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license
# @public
function bashlets::core::github::repo::license()
{
    local user="${1:?User name needed}"
    local repo="${2:?Repository name needed}"
    local url="/repos/$user/$repo/license"

    download_url="$($BASHLETS_NAMESPACE api get "$url" | jq -r .download_url?)"
    [[ -n $download_url ]] && curl -s "$download_url"
}

# List repository projects.
#
# @cf   https://developer.github.com/v3/projects/#list-repository-projects
# @public
function bashlets::core::github::repo::projects()
{
    local user="${1:?User name needed}"
    local repo="${2:?Repository name needed}"
    local state="${3:-all}"  # open, closed, all
    local limit="${4:-100}" callback="${5:-cat}"
    local url="/repos/$user/$repo/projects?state=$state"
    
    (
        # The Projects API is currently available for developers to preview. To
        # access the API during the preview period, we must provide a custom
        # media type in the Accept header.
        #
        # @cf https://developer.github.com/v3/projects/

        BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS="$BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS -H 'Accept: application/vnd.github.inertia-preview+json'"
        $BASHLETS_NAMESPACE api paginate "$url" id "$limit" "$callback"
    )
}

# Return the preferred README for a repository.
#
# @cf   https://developer.github.com/v3/repos/contents/#get-the-readme
# @public
function bashlets::core::github::repo::readme()
{
    local user="${1:?User name needed}"
    local repo="${2:?Repository name needed}"
    local url="/repos/$user/$repo/readme"
    local download_url

    download_url="$($BASHLETS_NAMESPACE api get "$url" | jq -r .download_url?)"
    [[ -n $download_url ]] && curl -s "$download_url"
}

# Star a repository.
#
# @cf   https://developer.github.com/v3/activity/starring/#star-a-repository
# @public
function bashlets::core::github::repo::star()
{
    local owner="${1:?User name needed}"
    local repo="${2:?Repository name needed}"
    local url="/user/starred/$owner/$repo"

    $BASHLETS_NAMESPACE api put "$url"
}

# List Stargazers for a repository.
#
# @cf   https://developer.github.com/v3/activity/starring/#list-stargazers
# @public
function bashlets::core::github::repo::stargazers()
{
    local owner="${1:?User name needed}"
    local repo="${2:?Repository name needed}"
    local limit="${3:-100}" callback="${4:-cat}"
    local url="/repos/$owner/$repo/stargazers"

    $BASHLETS_NAMESPACE api paginate "$url" login "$limit" "$callback"
}

# List tags for a repository.
#
# @cf   https://developer.github.com/v3/repos/#list-tags
# @public
function bashlets::core::github::repo::tags()
{
    local user="${1:?User name needed}"
    local repo="${2:?Repository name needed}"
    local limit="${3:-100}" callback="${4:-cat}"
    local url="/repos/$user/$repo/tags"
    
    $BASHLETS_NAMESPACE api paginate "$url" sha "$limit" "$callback"
}

# List all topics for a repository.
#
# @cf   https://developer.github.com/v3/repos/#list-all-topics-for-a-repository
# @public
function bashlets::core::github::repo::topics()
{
    local user="${1:?User name needed}"
    local repo="${2:?Repository name needed}"
    local url="/repos/$user/$repo/topics"
    
    (
        # The topics property for repositories on GitHub is currently available
        # for developers to preview. To view the topics property in calls that
        # return repository results, we must provide a custom media type in the
        # Accept header.

        BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS="$BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS -H 'Accept: application/vnd.github.mercy-preview+json'"
        $BASHLETS_NAMESPACE api get "$url" .names[]
    )
}

# Unstar a repository.
#
# @cf   https://developer.github.com/v3/activity/starring/#unstar-a-repository
# @public
function bashlets::core::github::repo::unstar()
{
    local owner="${1:?User name needed}"
    local repo="${2:?Repository name needed}"
    local url="/user/starred/$owner/$repo"

    $BASHLETS_NAMESPACE api delete "$url"
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
