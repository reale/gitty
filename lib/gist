#!/bin/bash


################################################################################
#  ____ ____ ____ ____ ____ 
# ||G |||i |||t |||t |||y ||
# ||__|||__|||__|||__|||__||
# |/__\|/__\|/__\|/__\|/__\|
#                                        
# Gitty -- A GitHub client in Bash
#
# Copyright (c) 2014-20 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################



# Download gist files.
#
# @cf   https://developer.github.com/v3/gists/#get-a-single-gist
# @cf   https://developer.github.com/v3/gists/#truncation
# @public
function gitty::gist::clone()
{
    local id="${1:?Gist id required}"
    local where="${2:-.}"
    local url="/gists/$id"
    local pull_url

    pull_url="$(gitty::api::get "$url" '.git_pull_url')"

    mkdir -p "$where"

    (
        cd "$where"
        git clone "$pull_url"
    )
}

# List comments on a gist.
#
# @cf   https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist
# @public
function gitty::gist::comments()
{
    local id="${1:?Gist id required}"
    local limit="${2:-100}" callback="${3:-cat}"
    local url="/gists/$id/comments"

    gitty::api::paginate "$url" id "$limit" "$callback"
}

# List gist commits.
#
# @cf   https://developer.github.com/v3/gists/#list-gist-commits
# @public
function gitty::gist::commits()
{
    local id="${1:?Gist id required}"
    local limit="${2:-100}" callback="${3:-cat}"
    local url="/gists/$id/commits"

    gitty::api::paginate "$url" version "$limit" "$callback"
}

# Create a gist.
#
# @cf   https://developer.github.com/v3/gists/#create-a-gist
# @public
function gitty::gist::create()
{
    local description="${1:?Description required}"
    local public="${2:-true}"
    shift 2
    local url="/gists"
    local data

    # inspired by https://stackoverflow.com/questions/38860529/create-json-using-jq-from-pipe-separated-keys-and-values-in-bash

    local jq_args=( )
    local jq_query='.'
    local idx=0

    while [[ $# -gt 0 ]]
    do
        local path="$1" ; shift
        local filename="$(basename "$path")"
        jq_args+=( --arg "key$idx"   "$filename"          )
        jq_args+=( --arg "value$idx" "$(cat "$path")" )
        jq_query+=" | .[\$key${idx}]={content: \$value${idx}}"
        ((idx++))
    done

    jq_query="$jq_query | {description: \"${description}\", public: ${public}, files: (.)}"

    # run the generated command
    data="$(jq "${jq_args[@]}" "$jq_query" <<<'{}')"

    gitty::api::post "$url" "$data"
}

# Delete a gist.
#
# @cf   https://developer.github.com/v3/gists/#delete-a-gist
# @public
function gitty::gist::delete()
{
    local id="${1:?Gist id required}"
    local url="/gists/$id"

    gitty::api::delete "$url"
}

# Describe a gist.
#
# @cf   https://developer.github.com/v3/gists/#get-a-single-gist
# @public
function gitty::gist::describe()
{
    local id="${1:?Gist id required}"
    local url="/gists/$id"

    gitty::api::get "$url" .description
}

# Download gist files.
#
# @cf   https://developer.github.com/v3/gists/#get-a-single-gist
# @cf   https://developer.github.com/v3/gists/#truncation
# @public
function gitty::gist::download()
{
    local id="${1:?Gist id required}" rev="$2"
    local where="${3:-.}"
    local url="/gists/$id"

    [[ -n $rev ]] && url="$url/$rev"

    mkdir -p "$where/$id"

    (
        local file
        cd "$where/$id"
        for file in $(gitty::api::get "$url" '.files[].raw_url')
        do
            curl -s "$file" -o "$(basename "$file")"
        done
    )
}

# Edit a gist.
#
# @cf   https://developer.github.com/v3/gists/#edit-a-gist
# @public
function gitty::gist::edit()
{
    echo Unimplemented >&2
}

# List gist files.
#
# @cf   https://developer.github.com/v3/gists/#get-a-single-gist
# @public
function gitty::gist::files()
{
    local id="${1:?Gist id required}" rev="$2"
    local url="/gists/$id"

    [[ -n $rev ]] && url="$url/$rev"

    gitty::api::get "$url" '.files | keys[]'
}

# Fork a gist.
#
# @cf   https://developer.github.com/v3/gists/#fork-a-gist
# @public
function gitty::gist::fork()
{
    local id="${1:?Gist id required}"
    local url="/gists/$id/forks"

    gitty::api::post "$url" "" .id
}

# List gist forks.
#
# @cf   https://developer.github.com/v3/gists/#list-gist-forks
# @public
function gitty::gist::forks()
{
    local id="${1:?Gist id required}"
    local limit="${2:-100}" callback="${3:-cat}"
    local url="/gists/$id/forks"

    gitty::api::paginate "$url" id "$limit" "$callback"
}

# Get a single gist.
#
# @cf   https://developer.github.com/v3/gists/#get-a-single-gist
# @public
function gitty::gist::get()
{
    local id="${1:?Gist id required}" rev="$2"
    local url="/gists/$id"

    [[ -n $rev ]] && url="$url/$rev"

    gitty::api::get "$url" .
}

# Check if a gist is starred.
#
# @cf   https://developer.github.com/v3/gists/#check-if-a-gist-is-starred
# @public
function gitty::gist::is_starred()
{
    local id="${1:?Gist id required}"
    local url="/gists/$id/star"
    local status

    status="$(gitty::api::status "$url")"

    [[ $status == 204 ]]
}

# Get the a gist's owner.
#
# @cf   https://developer.github.com/v3/gists/#get-a-single-gist
# @public
function gitty::gist::owner()
{
    local id="${1:?Gist id required}"

    gitty::gist::get "$id" \
        | gitty::api::filter .owner.login
}

# List all public gists.
#
# @cf   https://developer.github.com/v3/gists/#list-all-public-gists
# @public
function gitty::gist::public()
{
    local since="${1:-$GITTY_API_EPOCH}"
    local selector="${2:-id}"
    local limit="${3:-100}" callback="${4:-cat}"
    local url="/gists/public?since=$since"
    
    gitty::api::paginate "$url" "$selector" "$limit" "$callback"
}

# Star a gist.
#
# @cf   https://developer.github.com/v3/gists/#star-a-gist
# @public
function gitty::gist::star()
{
    local id="${1:?Gist id required}"
    local url="/gists/$id/star"

    gitty::api::put "$url"
}

# Unstar a gist.
#
# @cf   https://developer.github.com/v3/gists/#unstar-a-gist
# @public
function gitty::gist::unstar()
{
    local id="${1:?Gist id required}"
    local url="/gists/$id/star"

    gitty::api::delete "$url"
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
