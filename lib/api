#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-9 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlets core::github::defs

function bashlets_error()
{
    echo "$@" >&2
}

BASHLETS_ERROR=bashlets_error


function __bashlets::core::github::api::extract_headers()
{
    sed -n '1,/^\r*$/p' <<<"$1"
}

function __bashlets::core::github::api::extract_body()
{
    sed '1,/^\r*$/d; $d' <<<"$1"
}

function __bashlets::core::github::api::extract_http_code()
{
    sed -n '$p' <<<"$1"
}

# Make a generic HTTP request.
#
# @public
function bashlets::core::github::api::request()
{
    local what="${1:-body}" expected="${2:-200}" ; shift 2

    function __bashlets::core::github::api::request()
    {
        local accept user_agent basic_auth oauth_token
        local response headers body http_code
        local error_message

        # @cf https://developer.github.com/v3/media/#request-specific-version
        accept="-H 'Accept: application/vnd.github.v3+json'"

        # @cf https://developer.github.com/v3/#user-agent-required
        if [[ -n $BASHLETS_CORE_GITHUB_API_USER_AGENT ]]
        then
            user_agent="-H 'User-Agent: $BASHLETS_CORE_GITHUB_API_USER_AGENT'"
        fi

        if [[ -n $BASHLETS_CORE_GITHUB_API_BASIC_AUTH ]]
        then
            basic_auth="-u $BASHLETS_CORE_GITHUB_API_BASIC_AUTH"
        elif [[ -n $BASHLETS_CORE_GITHUB_API_OAUTH_TOKEN ]]
        then
            oauth_token="-H 'Authorization: token $BASHLETS_CORE_GITHUB_API_OAUTH_TOKEN'"
        fi

        # Perform HTTP request
        response="$(
            eval curl -is                                                  \
                "$accept"                                                  \
                "$user_agent"                                              \
                "$basic_auth"                                              \
                "$oauth_token"                                             \
                "$BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS"                 \
                --write-out '\\n%{http_code}\\n'                           \
                "$@"
        )"

        if [[ -n $BASHLETS_CORE_GITHUB_API_DEBUG ]]
        then
            echo "$response" >&2
        fi

        # Extract headers, body, HTTP code
          headers="$( __bashlets::core::github::api::extract_headers   "$response")"
             body="$( __bashlets::core::github::api::extract_body      "$response")"
        http_code="$( __bashlets::core::github::api::extract_http_code "$response")"

        # Check HTTP code
        if [[ $http_code == 000 ]]
        then
            $BASHLETS_ERROR "$BASHLETS_CORE_GITHUB_API_ERROR_HEADER [cURL error]"
            return $BASHLETS_CORE_GITHUB_API_ERROR
        elif [[ $what != http_code && $http_code != $expected ]]
        then
            error_message="$(jq -r .message <<<"$body")"
            $BASHLETS_ERROR "$BASHLETS_CORE_GITHUB_API_ERROR_HEADER [$error_message]"
            return $BASHLETS_CORE_GITHUB_API_ERROR
        fi

        # Echo headers/body/http_code
        [[ $what != none ]] && eval echo "\"\$$what\""
    }

    __bashlets::core::github::api::request "$@"
}

# Filter JSON content.
#
# @public
function bashlets::core::github::api::filter()
{
    if [[ -n $BASHLETS_CORE_GITHUB_API_FULL_JSON ]]
    then
        cat
    else
        jq -r "$@"
    fi
}

# Retrieve a resource.
#
# @cf   https://developer.github.com/v3/#http-verbs
# @public
function bashlets::core::github::api::get()
{
    local url="$1" ; shift

    [[ -n $url ]] || return

    bashlets::core::github::api::request body 200            \
        "$(printf "%q" "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}")" \
        | bashlets::core::github::api::filter "$@"
}

# Extract a given value from the HTTP headers.
#
# @public
function bashlets::core::github::api::extract_header_value()
{
    local headers="${1:?Headers needed}" key="${2:-[^:]\+}"

    echo "$headers" | sed -n "s/^$key: \(.*\)/\\1/p"
}

# Get the Link header values.
#
# @cf   https://developer.github.com/v3/#pagination
# @public
function bashlets::core::github::api::extract_rels()
{
    local headers="${1:?Headers needed}" filter="${2:-.+}"
    local regex="<(.+)>\;[[:space:]]rel=\"($filter)\""

    IFS=, read -a rels <<<$(
        bashlets::core::github::api::extract_header_value "$headers" Link
    )

    for rel in "${rels[@]}"
    do
        if [[ $rel =~ $regex ]]
        then
            printf "%s:%s\n" "${BASH_REMATCH[2]}" "${BASH_REMATCH[1]}"
        fi
    done
}

# Get the link relation for the given page of results.
#
# @cf   https://developer.github.com/v3/#pagination
# @public
function bashlets::core::github::api::extract_rel()
{
    local headers="${1:?Headers needed}" key="${2:-next}"
    local regex="${key}:(.*)" rel

    rel="$(bashlets::core::github::api::extract_rels "$headers" "$key")"
    if [[ $rel =~ $regex ]]
    then
        echo "${BASH_REMATCH[1]#${BASHLETS_CORE_GITHUB_API_ENDPOINT}}"
    fi
}

# Get the link relation for the next page of results.
#
# @cf   https://developer.github.com/v3/#pagination
# @public
function bashlets::core::github::api::next()
{
    local headers="${1:?Headers needed}"
    bashlets::core::github::api::extract_rel "$headers" next
}

# Get the link relation for the last page of results.
#
# @cf   https://developer.github.com/v3/#pagination
# @public
function bashlets::core::github::api::last()
{
    local headers="${1:?Headers needed}"
    bashlets::core::github::api::extract_rel "$headers" last
}

# Get the number of result pages.
#
# @cf   https://developer.github.com/v3/#pagination
# @public
function bashlets::core::github::api::count()
{
    local headers="${1:?Headers needed}"
    local regex="page=([0-9]+)" last
    last="$(bashlets::core::github::api::last "$headers")"
    [[ $last =~ $regex ]] && echo "${BASH_REMATCH[1]}"
}

# Get paginated items.
#
# @cf   https://developer.github.com/v3/#pagination
# @public
function bashlets::core::github::api::paginate()
{
    local url="$1" key="$2"
    local limit="${3:-100}" callback="${4:-cat}"
    local count=0
    
    [[ -n $url || -n $key ]] || return

    while true
    do
        local response headers body
        local item next
        declare -a items

        response="$(
            bashlets::core::github::api::request response 200        \
                "$(printf "%q" "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}")"
        )"

        headers="$( __bashlets::core::github::api::extract_headers "$response")"
           body="$( __bashlets::core::github::api::extract_body    "$response")"

        items=("$(echo "$body" | bashlets::core::github::api::filter ".[].\"$key\"")")

        for item in "${items[@]}"
        do
            (( count < limit )) || break 2
            ((count++))
            [[ -n $item ]] && echo "$item"
        done

        next="$(bashlets::core::github::api::next "$headers")"
        [[ -z $next || $next == $url ]] && break
        url="$next"

    done | $callback
}

# Get the HTTP status code.
#
# @public
function bashlets::core::github::api::status()
{
    local url="$1" ; shift

    [[ -n $url ]] || return

    bashlets::core::github::api::request http_code 000       \
        "$(printf "%q" "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}")"
}

# Get the HTTP headers.
#
# @public
function bashlets::core::github::api::header()
{
    local url="$1" key="${2:-[^:]\+}"

    [[ -n $url ]] || return

    bashlets::core::github::api::request headers 200         \
        "$(printf "%q" "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}")" \
        | grep "^$key: "
}

# Extract a given value from the HTTP headers.
#
# @public
function bashlets::core::github::api::header_value()
{
    local url="$1" key="${2:-[^:]\+}"

    [[ -n $url ]] || return

    bashlets::core::github::api::request headers 200         \
        "$(printf "%q" "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}")" \
        | sed -n "s/^$key: \(.*\)/\\1/p"
}

# Create a resource.
#
# @cf   https://developer.github.com/v3/#http-verbs
# @public
function bashlets::core::github::api::post()
{
    local url="$1" data="$2" ; shift 2

    [[ -n $url || -n $BASHLETS_CORE_GITHUB_API_OAUTH_TOKEN ]] || return

    bashlets::core::github::api::request body 201 -X POST    \
        "-H 'Content-Type: application/json'"                \
        --data "$(printf "%q" "$data")"                      \
        "$(printf "%q" "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}")" \
        | bashlets::core::github::api::filter "$@"
}

# Specialized POST method that expects a 200 status code.
#
# @cf   https://developer.github.com/v3/#http-verbs
# @public
function bashlets::core::github::api::post200()
{
    local url="$1" data="$2"
    local mime="${3:-application/json}"

    [[ -n $url ]] || return

    $BASHLETS_NAMESPACE api request body 200 -X POST           \
        "-H 'Content-Type: $mime'"                             \
        --data "$(printf "%q" "$data")"                        \
        "$(printf "%q" "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}")"
}

# Create a resource in an asynchronous fashion.
#
# @cf   https://developer.github.com/v3/#http-verbs
# @public
function bashlets::core::github::api::post202()
{
    local url="$1" data="$2" ; shift 2

    [[ -n $url || -n $BASHLETS_CORE_GITHUB_API_OAUTH_TOKEN ]] || return

    bashlets::core::github::api::request body 202 -X POST    \
        "-H 'Content-Type: application/json'"                \
        --data "$(printf "%q" "$data")"                      \
        "$(printf "%q" "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}")" \
        | bashlets::core::github::api::filter "$@"
}

# Update a resource with partial JSON data.
#
# @cf   https://developer.github.com/v3/#http-verbs
# @public
function bashlets::core::github::api::patch()
{
    local url="$1" data="$2" ; shift 2

    [[ -n $url || -n $BASHLETS_CORE_GITHUB_API_OAUTH_TOKEN ]] || return

    bashlets::core::github::api::request body 200 -X PATCH   \
        "-H 'Content-Type: application/json'"                \
        --data "$(printf "%q" "$data")"                      \
        "$(printf "%q" "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}")" \
        | bashlets::core::github::api::filter "$@"
}

# Replace a resource or a collection.
#
# @cf   https://developer.github.com/v3/#http-verbs
# @public
function bashlets::core::github::api::put()
{
    local url="$1" data="$2"

    [[ -n $url || -n $BASHLETS_CORE_GITHUB_API_OAUTH_TOKEN ]] || return

    if [[ -n $data ]]
    then
        bashlets::core::github::api::request none 204 -X PUT \
            "-H 'Content-Type: application/json'"            \
            --data "$(printf "%q" "$data")"                  \
            "$(printf "%q" "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}")"
    else
        bashlets::core::github::api::request none 204 -X PUT \
            -H "'Content-Length: 0'"                         \
            "$(printf "%q" "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}")"
    fi
}

# Delete a resouce.
#
# @cf   https://developer.github.com/v3/#http-verbs
# @public
function bashlets::core::github::api::delete()
{
    local url="$1" data="$2"

    [[ -n $url || -n $BASHLETS_CORE_GITHUB_API_OAUTH_TOKEN ]] || return

    if [[ -n $data ]]
    then
        bashlets::core::github::api::request none 204 -X DELETE  \
            "-H 'Content-Type: application/json'"                \
            --data "$(printf "%q" "$data")"                      \
            "$(printf "%q" "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}")"
    else
        bashlets::core::github::api::request none 204 -X DELETE  \
            "$(printf "%q" "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}")"
    fi
}

# Get API root endpoint.
#
# @cf   https://developer.github.com/v3/#root-endpoint
# @public
function bashlets::core::github::api::endpoint()
{
    echo "$BASHLETS_CORE_GITHUB_API_ENDPOINT"
}

# Get API version.
#
# @cf   https://developer.github.com/v3/versions/#versions
# @public
function bashlets::core::github::api::version()
{
    echo v3
}


# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
