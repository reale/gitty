#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-9 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlets core::github::api
source bashlets core::github::defs

# Follow a user.
#
# @cf   https://developer.github.com/v3/users/followers/#follow-a-user
# @public
function bashlets::core::github::user::follow()
{
    local username="${1:?User login needed}"
    local url="/user/following/$username"

    $BASHLETS_NAMESPACE api put "$url"
}

# List followers of the specified user.
#
# @cf   https://developer.github.com/v3/users/followers/#list-followers-of-a-user
# @public
function bashlets::core::github::user::followers()
{
    local user="${1:?User name required}"
    local since="${2:-0}"
    local limit="${3:-100}" callback="${4:-cat}"
    local url="/users/$user/followers?since=$since"

    $BASHLETS_NAMESPACE api paginate "$url" login "$limit" "$callback"
}

# List who the specified user is following.
#
# @cf   https://developer.github.com/v3/users/followers/#list-users-followed-by-another-user
# @public
function bashlets::core::github::user::following()
{
    local user="${1:?User name required}"
    local since="${2:-0}"
    local limit="${3:-100}" callback="${4:-cat}"
    local url="/users/$user/following?since=$since"

    $BASHLETS_NAMESPACE api paginate "$url" login "$limit" "$callback"
}

# List public gists for the specified user.
#
# @cf   https://developer.github.com/v3/gists/#list-a-users-gists
# @public
function bashlets::core::github::user::gists()
{
    local user="${1:?User name required}"
    local since="${2:-$BASHLETS_CORE_GITHUB_API_EPOCH}"
    local limit="${3:-100}" callback="${4:-cat}"
    local url="/users/$user/gists?since=$since"

    $BASHLETS_NAMESPACE api paginate "$url" id "$limit" "$callback"
}

# Check if the specified user follows another.
#
# @cf   https://developer.github.com/v3/users/followers/#check-if-one-user-follows-another
# @public
function bashlets::core::github::user::is_following()
{
    local user="${1:?User name required}"
    local target_user="${2:?Target user name required}"
    local url="/users/$user/following/$target_user"
    local status

    status="$($BASHLETS_NAMESPACE api status "$url")"

    [[ $status == 204 ]]
}

# List the verified public keys for the specified user.
#
# @cf   https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user
# @public
function bashlets::core::github::user::keys()
{
    local user="${1:?User name required}"
    local limit="${2:-100}" callback="${3:-cat}"
    local url="/users/$user/keys"

    $BASHLETS_NAMESPACE api paginate "$url" key "$limit" "$callback"
}

# List public organization memberships for the specified user.
#
# @cf   https://developer.github.com/v3/orgs/#list-user-organizations
function bashlets::core::github::user::orgs()
{
    local user="${1:?User name required}"
    local limit="${2:-100}" callback="${3:-cat}"
    local url="/users/$user/orgs"

    $BASHLETS_NAMESPACE api paginate "$url" login "$limit" "$callback"
}

# List public repositories for the specified user.
#
# @cf   https://developer.github.com/v3/repos/#list-user-repositories
# @public
function bashlets::core::github::user::repos()
{
    local user="${1:?User name required}"
    local type="${2:-owner}"      # all, owner, member
    local sort="${3:-full_name}"  # created, updated, pushed, full_name
    local direction="${4:-auto}"  # auto, asc, desc
    local limit="${5:-100}" callback="${6:-cat}"

    if [[ $direction == auto ]]
    then
        [[ $sort == full_name ]] && direction=asc || direction=desc
    fi

    local url="/users/$user/repos?type=$type&sort=$sort&direction=$direction"

    $BASHLETS_NAMESPACE api paginate "$url" name "$limit" "$callback"
}

# List repositories being starred by the specified user.
#
# @cf   https://developer.github.com/v3/activity/starring/#list-repositories-being-starred
# @public
function bashlets::core::github::user::starred_repos()
{
    local user="${1:?User name required}"
    local sort="${2:-created}"    # created, updated
    local direction="${3:-desc}"  # asc, desc
    local limit="${4:-100}" callback="${5:-cat}"

    local url="/users/$user/starred?sort=$sort&direction=$direction"

    $BASHLETS_NAMESPACE api paginate "$url" name "$limit" "$callback"
}

# Get the public timeline for the specified user, in Atom format.
#
# @cf   https://developer.github.com/v3/activity/feeds/#list-feeds
# @public
function bashlets::core::github::user::timeline()
{
    local user="${1:?User name required}"

    curl -s "$(bashlets::core::github::user::timeline_url "$user")"
}

# Get the public timeline URI for the specified user.
#
# @cf   https://developer.github.com/v3/activity/feeds/#list-feeds
# @public
function bashlets::core::github::user::timeline_url()
{
    local user="${1:?User name required}"
    local url="/feeds"
    local timeline_url

    timeline_url="$($BASHLETS_NAMESPACE api get "$url" .user_url)"

    # TODO implement generic URI template parsing
    timeline_url="${timeline_url//\{user\}/$user}"

    echo "$timeline_url"
}

# Unfollow a user.
#
# @cf   https://developer.github.com/v3/users/followers/#unfollow-a-user
# @public
function bashlets::core::github::user::unfollow()
{
    local username="${1:?User login needed}"
    local url="/user/following/$username"

    $BASHLETS_NAMESPACE api delete "$url"
}


# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
