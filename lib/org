#!/bin/bash


################################################################################
#  ____ ____ ____ ____ ____ 
# ||G |||i |||t |||t |||y ||
# ||__|||__|||__|||__|||__||
# |/__\|/__\|/__\|/__\|/__\|
#                                        
# Gitty -- A GitHub client in Bash
#
# Copyright (c) 2014-9 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlets core::github::api

# Block a user.
#
# @cf   https://developer.github.com/v3/orgs/blocking/#block-a-user
# @public
function bashlets::core::github::org::block()
{
    local org="${1:?Organization login needed}"
    local username="${2:?User login needed}"

    local url="/orgs/$org/blocks/$username"

    (
        # The User Blocking API on GitHub is currently available for developers
        # to preview. To access the API, we must provide a custom media type in
        # the Accept header.
        #
        # @cf https://developer.github.com/v3/orgs/blocking/#blocking-organizations-users

        BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS="$BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS -H 'Accept: application/vnd.github.giant-sentry-fist-preview+json'"
        $BASHLETS_NAMESPACE api put "$url"
    )
}

# List the users blocked by an organization.
#
# @cf   https://developer.github.com/v3/orgs/blocking/#list-blocked-users
# @public
function bashlets::core::github::org::blocked_users()
{
    local org="${1:?Organization login needed}"

    local url="/orgs/$org/blocks"

    (
        # The User Blocking API on GitHub is currently available for developers
        # to preview. To access the API, we must provide a custom media type in
        # the Accept header.
        #
        # @cf https://developer.github.com/v3/orgs/blocking/#blocking-organizations-users

        BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS="$BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS -H 'Accept: application/vnd.github.giant-sentry-fist-preview+json'"
        $BASHLETS_NAMESPACE api get "$url" .[].login
    )
}

# Get an organization company.
#
# @cf   https://developer.github.com/v3/orgs/#get-an-organization
# @public
function bashlets::core::github::org::company()
{
    local org="${1:?Organization login needed}"

    local url="/orgs/$org"

    $BASHLETS_NAMESPACE api get "$url" .company
}

# Get an organization description.
#
# @cf   https://developer.github.com/v3/orgs/#get-an-organization
# @public
function bashlets::core::github::org::describe()
{
    local org="${1:?Organization login needed}"

    local url="/orgs/$org"

    $BASHLETS_NAMESPACE api get "$url" .description
}

# Edit an organization.
#
# @cf   https://developer.github.com/v3/orgs/#edit-an-organization
# @public
function bashlets::core::github::org::edit()
{
    local org="${1:?Organization login needed}"
    local key="${2:?Key needed}"
    local value="${3:?Value needed}"

    local url="/orgs/$org"

    $BASHLETS_NAMESPACE api patch "$url" "{\"$key\": \"$value\"}" .updated_at
}

# Get an organization email.
#
# @cf   https://developer.github.com/v3/orgs/#get-an-organization
# @public
function bashlets::core::github::org::email()
{
    local org="${1:?Organization login needed}"

    local url="/orgs/$org"

    $BASHLETS_NAMESPACE api get "$url" .email
}

# Get an organization.
#
# @cf   https://developer.github.com/v3/orgs/#get-an-organization
# @public
function bashlets::core::github::org::get()
{
    local org="${1:?Organization login needed}"

    local url="/orgs/$org"

    $BASHLETS_NAMESPACE api get "$url" .
}

# Check whether a user is blocked from an organization.
#
# @cf   https://developer.github.com/v3/orgs/blocking/#check-whether-a-user-is-blocked-from-an-organization
# @public
function bashlets::core::github::org::is_blocked()
{
    local org="${1:?Organization login needed}"
    local username="${2:?User login needed}"
    local url="/orgs/$org/blocks/$username"
    local status

    (
        # The User Blocking API on GitHub is currently available for developers
        # to preview. To access the API, we must provide a custom media type in
        # the Accept header.
        #
        # @cf https://developer.github.com/v3/orgs/blocking/#blocking-organizations-users

        BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS="$BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS -H 'Accept: application/vnd.github.giant-sentry-fist-preview+json'"
        status="$($BASHLETS_NAMESPACE api status "$url")"

        [[ $status == 204 ]]
    )
}

# Get an organization location.
#
# @cf   https://developer.github.com/v3/orgs/#get-an-organization
# @public
function bashlets::core::github::org::location()
{
    local org="${1:?Organization login needed}"

    local url="/orgs/$org"

    $BASHLETS_NAMESPACE api get "$url" .location
}

# Get an organization name.
#
# @cf   https://developer.github.com/v3/orgs/#get-an-organization
# @public
function bashlets::core::github::org::name()
{
    local org="${1:?Organization login needed}"

    local url="/orgs/$org"

    $BASHLETS_NAMESPACE api get "$url" .name
}

# List organization projects.
#
# @cf   https://developer.github.com/v3/projects/#list-organization-projects
# @public
function bashlets::core::github::org::projects()
{
    local org="${1:?Organization login needed}"
    local state="${2:-all}"  # open, closed, all
    local limit="${3:-100}" callback="${4:-cat}"
    local url="/orgs/$org/projects?state=$state"
    
    (
        # The Projects API is currently available for developers to preview. To
        # access the API during the preview period, we must provide a custom
        # media type in the Accept header.
        #
        # @cf https://developer.github.com/v3/projects/

        BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS="$BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS -H 'Accept: application/vnd.github.inertia-preview+json'"
        $BASHLETS_NAMESPACE api paginate "$url" id "$limit" "$callback"
    )
}

# List organization repositories.
#
# @cf   https://developer.github.com/v3/repos/#list-organization-repositories
# @public
function bashlets::core::github::org::repos()
{
    local org="${1:?Organization login needed}"
    local type="${2:-all}"  # all, public, private, forks, sources, member
    local limit="${3:-100}" callback="${4:-cat}"

    local url="/orgs/$org/repos?type=$type"

    $BASHLETS_NAMESPACE api paginate "$url" name "$limit" "$callback"
}

# Unblock a user.
#
# @cf   https://developer.github.com/v3/orgs/blocking/#unblock-a-user
# @public
function bashlets::core::github::org::unblock()
{
    local org="${1:?Organization login needed}"
    local username="${2:?User login needed}"

    local url="/orgs/$org/blocks/$username"

    (
        # The User Blocking API on GitHub is currently available for developers
        # to preview. To access the API, we must provide a custom media type in
        # the Accept header.
        #
        # @cf https://developer.github.com/v3/orgs/blocking/#blocking-organizations-users

        BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS="$BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS -H 'Accept: application/vnd.github.giant-sentry-fist-preview+json'"
        $BASHLETS_NAMESPACE api delete "$url"
    )
}

# Get an organization url.
#
# @cf   https://developer.github.com/v3/orgs/#get-an-organization
# @public
function bashlets::core::github::org::url()
{
    local org="${1:?Organization login needed}"

    local url="/orgs/$org"

    $BASHLETS_NAMESPACE api get "$url" .url
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
